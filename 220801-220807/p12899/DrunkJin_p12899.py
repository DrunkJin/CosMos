def solution(n):
    hab = 0                                 # 변환된 값 
    cnt = 0                                 # 변환될 때다 10의 자리수를 곱해줘서 124로만 표현되도록 만들어줌
    while n > 3 :                           # 3보다 작아질 때까지 반복
        if n%3 == 0 :                       # 3으로 나누어 떨어지는 경우 4를 추가해야됨
            hab += 4 * (pow(10, cnt))       # 10의 cnt제곱의 자릿수만큼을 더해서 추가
            n = (n // 3) - 1                # 3으로 나눈 몫에서 1을 빼줌 -> 6은 14로 변환되어야하는데 안빼주면 24로 변환됨
        else :                              
            hab += (n % 3) * (pow(10, cnt)) # 나누어떨어지지 않는 경우 나머지만큼을 더해줌
            n = n // 3                      # 나누어떨어지지 않는 경우에는 1을 빼지 않아도 됨
        cnt += 1                            # 1의 자릿수부터 찾아나가기 때문에 한번 돌때 마다 10의 자리를 이동하기 위해 cnt추가
    # 1,2,3인 경우 처리
    if n%3 == 0:                    
        hab += 4*(pow(10, cnt))
    else:
        hab += (n%3)*(pow(10, cnt))
    return str(hab)                         # 최종 답안은 str형태로 제출


    """
    정확성  테스트
테스트 1 〉	통과 (0.00ms, 9.93MB)
테스트 2 〉	통과 (0.00ms, 10.2MB)
테스트 3 〉	통과 (0.00ms, 10.3MB)
테스트 4 〉	통과 (0.00ms, 10.1MB)
테스트 5 〉	통과 (0.01ms, 10.2MB)
테스트 6 〉	통과 (0.01ms, 10.1MB)
테스트 7 〉	통과 (0.01ms, 10.2MB)
테스트 8 〉	통과 (0.01ms, 10.2MB)
테스트 9 〉	통과 (0.01ms, 10.3MB)
테스트 10 〉	통과 (0.01ms, 10.2MB)
테스트 11 〉	통과 (0.01ms, 10.2MB)
테스트 12 〉	통과 (0.01ms, 10.2MB)
테스트 13 〉	통과 (0.01ms, 10.2MB)
테스트 14 〉	통과 (0.02ms, 10.3MB)
효율성  테스트
테스트 1 〉	통과 (0.01ms, 10.3MB)
테스트 2 〉	통과 (0.02ms, 10.1MB)
테스트 3 〉	통과 (0.02ms, 10.3MB)
테스트 4 〉	통과 (0.02ms, 10.3MB)
테스트 5 〉	통과 (0.02ms, 10.3MB)
테스트 6 〉	통과 (0.02ms, 10.1MB)
채점 결과
정확성: 70.0
효율성: 30.0
합계: 100.0 / 100.0
    """